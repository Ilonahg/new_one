from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.exceptions import PermissionDenied
from users.permissions import IsModerator, IsOwner
from .models import Course, Lesson
from .serializers import CourseSerializer, LessonSerializer


class CourseViewSet(viewsets.ModelViewSet):
    queryset = Course.objects.all()
    serializer_class = CourseSerializer

    def perform_create(self, serializer):
        # üîí –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å—ã
        if self.request.user.groups.filter(name='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã').exists():
            raise PermissionDenied("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å—ã.")
        serializer.save(owner=self.request.user)

    def destroy(self, request, *args, **kwargs):
        # üîí –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∫—É—Ä—Å—ã
        if request.user.groups.filter(name='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã').exists():
            raise PermissionDenied("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫—É—Ä—Å—ã.")
        return super().destroy(request, *args, **kwargs)

    def get_permissions(self):
        """
        –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:
        - update/partial_update ‚Üí –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Üí –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        """
        if self.action in ['update', 'partial_update']:
            return [IsAuthenticated(), IsModerator() | IsOwner()]
        return [IsAuthenticated()]


class LessonViewSet(viewsets.ModelViewSet):
    queryset = Lesson.objects.all()
    serializer_class = LessonSerializer

    def perform_create(self, serializer):
        # üîí –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Ä–æ–∫–∏
        if self.request.user.groups.filter(name='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã').exists():
            raise PermissionDenied("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Ä–æ–∫–∏.")
        serializer.save(owner=self.request.user)

    def destroy(self, request, *args, **kwargs):
        # üîí –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—Ä–æ–∫–∏
        if request.user.groups.filter(name='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã').exists():
            raise PermissionDenied("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —É—Ä–æ–∫–∏.")
        return super().destroy(request, *args, **kwargs)

    def get_permissions(self):
        """
        –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:
        - update/partial_update ‚Üí –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Üí –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        """
        if self.action in ['update', 'partial_update']:
            return [IsAuthenticated(), IsModerator() | IsOwner()]
        return [IsAuthenticated()]
